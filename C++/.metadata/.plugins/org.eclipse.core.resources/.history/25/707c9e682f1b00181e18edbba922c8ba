#include <iostream>
#include <cstring>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <array>
#include "globals.h"

char checkState(int board[7][6]);
int possibleMove(int board[6]);
int compareN(const void * a, const void *b);

int minimax(int board[7][6], int _depth, bool maximizingPlayer, int maxDepth) {
	char state = checkState(board);
	if (_depth == maxDepth || state != 'p') {
		if (state == '2') {
			return 1000000 - _depth;
		} else if (state == '1') {
			return -1000000 + _depth;
		} else {
			return 0;
		}
	}
	int bestValue = maximizingPlayer ? _depth - 1000000 : 1000000 - _depth;
	for (int i = 0; i < 7; ++i) {
		int move = possibleMove(board[i]);
		int _board[7][6];
		if (move != -1) {
			for (int x = 0; x < 7; ++x) {
				for (int y = 0; y < 6; ++y) {
					_board[x][y] = board[x][y];
				}
			}
			_board[i][move] = maximizingPlayer ? 2 : 1;
			int v = minimax(_board, _depth + 1, !maximizingPlayer, maxDepth);
			bestValue =
					maximizingPlayer ? std::max(v, bestValue) : std::min(v, bestValue);
		}
	}
	return bestValue;
}

int minimaxMove(int maxDepth, int _board[7][6]) {
	for (int x = 0; x < 7; ++x) {
		moves[x].val = -10000000;
		moves[x].move = x;
		if (x == 3) {
			moves[x].prior = 6;
		} else if (x == 2) {
			moves[x].prior = 5;
		} else if (x == 4) {
			moves[x].prior = 4;
		} else if (x == 1) {
			moves[x].prior = 3;
		} else if (x == 5) {
			moves[x].prior = 2;
		} else if (x == 0) {
			moves[x].prior = 1;
		} else {
			moves[x].prior = 0;
		}
		int posMove = possibleMove(brd[x]);
		if (posMove >= 0) {
			int board[7][6];
			for (int i = 0; i < 7; ++i) {
				for (int j = 0; j < 6; ++j) {
					board[i][j] = _board[i][j];
				}
			}
			board[x][posMove] = 2;
			moves[x].val = minimax(board, 1, false, maxDepth);
		}
	}
	qsort(moves, 7, sizeof(Moves), compareN);
	return moves[0].move;
}
